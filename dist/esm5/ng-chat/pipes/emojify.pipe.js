import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
var emojiDictionary = [
    { patterns: [':)', ':-)', '=)'], unicode: '😃' },
    { patterns: [':D', ':-D', '=D'], unicode: '😀' },
    { patterns: [':(', ':-(', '=('], unicode: '🙁' },
    { patterns: [':|', ':-|', '=|'], unicode: '😐' },
    { patterns: [':*', ':-*', '=*'], unicode: '😙' },
    { patterns: ['T_T', 'T.T'], unicode: '😭' },
    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: '😮' },
    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: '😋' },
    { patterns: ['>.<'], unicode: '😣' },
    { patterns: ['@.@'], unicode: '😵' },
    { patterns: ['*.*'], unicode: '😍' },
    { patterns: ['<3'], unicode: '❤️' },
    { patterns: ['^.^'], unicode: '😊' },
    { patterns: [':+1'], unicode: '👍' },
    { patterns: [':-1'], unicode: '👎' }
];
/*
 * Transforms common emoji text to UTF encoded emojis
*/
var EmojifyPipe = /** @class */ (function () {
    function EmojifyPipe() {
    }
    EmojifyPipe.prototype.transform = function (message, pipeEnabled) {
        if (pipeEnabled && message && message.length > 1) {
            emojiDictionary.forEach(function (emoji) {
                emoji.patterns.forEach(function (pattern) {
                    message = message.replace(pattern, emoji.unicode);
                });
            });
        }
        return message;
    };
    EmojifyPipe = __decorate([
        Pipe({ name: 'emojify' })
    ], EmojifyPipe);
    return EmojifyPipe;
}());
export { EmojifyPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vamlmeS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhdC8iLCJzb3VyY2VzIjpbIm5nLWNoYXQvcGlwZXMvZW1vamlmeS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxJQUFJLGVBQWUsR0FBRztJQUNsQixFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNoRCxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNoRCxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNoRCxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNoRCxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNoRCxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQzNDLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ25FLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ25FLEVBQUUsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNwQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDcEMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ3BDLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNuQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDcEMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ3BDLEVBQUUsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtDQUN2QyxDQUFDO0FBRUY7O0VBRUU7QUFFRjtJQUFBO0lBWUEsQ0FBQztJQVhHLCtCQUFTLEdBQVQsVUFBVSxPQUFlLEVBQUUsV0FBb0I7UUFDM0MsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO2dCQUN6QixLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87b0JBQzFCLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVMLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFYVSxXQUFXO1FBRHZCLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQztPQUNYLFdBQVcsQ0FZdkI7SUFBRCxrQkFBQztDQUFBLEFBWkQsSUFZQztTQVpZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmxldCBlbW9qaURpY3Rpb25hcnkgPSBbXG4gICAgeyBwYXR0ZXJuczogWyc6KScsICc6LSknLCAnPSknXSwgdW5pY29kZTogJ/CfmIMnIH0sXG4gICAgeyBwYXR0ZXJuczogWyc6RCcsICc6LUQnLCAnPUQnXSwgdW5pY29kZTogJ/CfmIAnIH0sXG4gICAgeyBwYXR0ZXJuczogWyc6KCcsICc6LSgnLCAnPSgnXSwgdW5pY29kZTogJ/CfmYEnIH0sXG4gICAgeyBwYXR0ZXJuczogWyc6fCcsICc6LXwnLCAnPXwnXSwgdW5pY29kZTogJ/CfmJAnIH0sXG4gICAgeyBwYXR0ZXJuczogWyc6KicsICc6LSonLCAnPSonXSwgdW5pY29kZTogJ/CfmJknIH0sXG4gICAgeyBwYXR0ZXJuczogWydUX1QnLCAnVC5UJ10sIHVuaWNvZGU6ICfwn5itJyB9LFxuICAgIHsgcGF0dGVybnM6IFsnOk8nLCAnOi1PJywgJz1PJywgJzpvJywgJzotbycsICc9byddLCB1bmljb2RlOiAn8J+YricgfSxcbiAgICB7IHBhdHRlcm5zOiBbJzpQJywgJzotUCcsICc9UCcsICc6cCcsICc6LXAnLCAnPXAnXSwgdW5pY29kZTogJ/CfmIsnIH0sXG4gICAgeyBwYXR0ZXJuczogWyc+LjwnXSwgdW5pY29kZTogJ/CfmKMnIH0sXG4gICAgeyBwYXR0ZXJuczogWydALkAnXSwgdW5pY29kZTogJ/CfmLUnIH0sXG4gICAgeyBwYXR0ZXJuczogWycqLionXSwgdW5pY29kZTogJ/CfmI0nIH0sXG4gICAgeyBwYXR0ZXJuczogWyc8MyddLCB1bmljb2RlOiAn4p2k77iPJyB9LFxuICAgIHsgcGF0dGVybnM6IFsnXi5eJ10sIHVuaWNvZGU6ICfwn5iKJyB9LFxuICAgIHsgcGF0dGVybnM6IFsnOisxJ10sIHVuaWNvZGU6ICfwn5GNJyB9LFxuICAgIHsgcGF0dGVybnM6IFsnOi0xJ10sIHVuaWNvZGU6ICfwn5GOJyB9XG5dO1xuXG4vKlxuICogVHJhbnNmb3JtcyBjb21tb24gZW1vamkgdGV4dCB0byBVVEYgZW5jb2RlZCBlbW9qaXNcbiovXG5AUGlwZSh7bmFtZTogJ2Vtb2ppZnknfSlcbmV4cG9ydCBjbGFzcyBFbW9qaWZ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShtZXNzYWdlOiBzdHJpbmcsIHBpcGVFbmFibGVkOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHBpcGVFbmFibGVkICYmIG1lc3NhZ2UgJiYgbWVzc2FnZS5sZW5ndGggPiAxKSB7ICBcbiAgICAgICAgICAgIGVtb2ppRGljdGlvbmFyeS5mb3JFYWNoKGVtb2ppID0+IHtcbiAgICAgICAgICAgICAgICBlbW9qaS5wYXR0ZXJucy5mb3JFYWNoKHBhdHRlcm4gPT4ge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKHBhdHRlcm4sIGVtb2ppLnVuaWNvZGUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cbn1cbiJdfQ==